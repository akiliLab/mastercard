// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/currency-conversion.proto

package mastercard

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MastercardCurrencyConversionRequest struct {
	// Date of the requested FX rates.
	FxDate string `protobuf:"bytes,1,opt,name=fxDate,proto3" json:"fxDate,omitempty"`
	// Currency of the transaction.
	TransCurr string `protobuf:"bytes,2,opt,name=transCurr,proto3" json:"transCurr,omitempty"`
	// Cardholder billing currency.
	CrdhldBillCurr string `protobuf:"bytes,3,opt,name=crdhldBillCurr,proto3" json:"crdhldBillCurr,omitempty"`
	// Additional fees imposed by the bank.
	BankFee int64 `protobuf:"varint,4,opt,name=bankFee,proto3" json:"bankFee,omitempty"`
	// Amount in the transaction currency
	TransAmt             float32  `protobuf:"fixed32,5,opt,name=transAmt,proto3" json:"transAmt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MastercardCurrencyConversionRequest) Reset()         { *m = MastercardCurrencyConversionRequest{} }
func (m *MastercardCurrencyConversionRequest) String() string { return proto.CompactTextString(m) }
func (*MastercardCurrencyConversionRequest) ProtoMessage()    {}
func (*MastercardCurrencyConversionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1d46281ede0b93f, []int{0}
}

func (m *MastercardCurrencyConversionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MastercardCurrencyConversionRequest.Unmarshal(m, b)
}
func (m *MastercardCurrencyConversionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MastercardCurrencyConversionRequest.Marshal(b, m, deterministic)
}
func (m *MastercardCurrencyConversionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MastercardCurrencyConversionRequest.Merge(m, src)
}
func (m *MastercardCurrencyConversionRequest) XXX_Size() int {
	return xxx_messageInfo_MastercardCurrencyConversionRequest.Size(m)
}
func (m *MastercardCurrencyConversionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MastercardCurrencyConversionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MastercardCurrencyConversionRequest proto.InternalMessageInfo

func (m *MastercardCurrencyConversionRequest) GetFxDate() string {
	if m != nil {
		return m.FxDate
	}
	return ""
}

func (m *MastercardCurrencyConversionRequest) GetTransCurr() string {
	if m != nil {
		return m.TransCurr
	}
	return ""
}

func (m *MastercardCurrencyConversionRequest) GetCrdhldBillCurr() string {
	if m != nil {
		return m.CrdhldBillCurr
	}
	return ""
}

func (m *MastercardCurrencyConversionRequest) GetBankFee() int64 {
	if m != nil {
		return m.BankFee
	}
	return 0
}

func (m *MastercardCurrencyConversionRequest) GetTransAmt() float32 {
	if m != nil {
		return m.TransAmt
	}
	return 0
}

type MastercardCurrencyConversionReply struct {
	// The name of the service being requested.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of response being returned by the API.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The description of the API being called.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Additional fees imposed by the bank.
	Date *timestamp.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// Amount in the transaction currency
	TransAmt float32 `protobuf:"fixed32,5,opt,name=transAmt,proto3" json:"transAmt,omitempty"`
	// Data
	Data                 *CurrencyDataResponse `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MastercardCurrencyConversionReply) Reset()         { *m = MastercardCurrencyConversionReply{} }
func (m *MastercardCurrencyConversionReply) String() string { return proto.CompactTextString(m) }
func (*MastercardCurrencyConversionReply) ProtoMessage()    {}
func (*MastercardCurrencyConversionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1d46281ede0b93f, []int{1}
}

func (m *MastercardCurrencyConversionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MastercardCurrencyConversionReply.Unmarshal(m, b)
}
func (m *MastercardCurrencyConversionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MastercardCurrencyConversionReply.Marshal(b, m, deterministic)
}
func (m *MastercardCurrencyConversionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MastercardCurrencyConversionReply.Merge(m, src)
}
func (m *MastercardCurrencyConversionReply) XXX_Size() int {
	return xxx_messageInfo_MastercardCurrencyConversionReply.Size(m)
}
func (m *MastercardCurrencyConversionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MastercardCurrencyConversionReply.DiscardUnknown(m)
}

var xxx_messageInfo_MastercardCurrencyConversionReply proto.InternalMessageInfo

func (m *MastercardCurrencyConversionReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MastercardCurrencyConversionReply) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MastercardCurrencyConversionReply) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MastercardCurrencyConversionReply) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *MastercardCurrencyConversionReply) GetTransAmt() float32 {
	if m != nil {
		return m.TransAmt
	}
	return 0
}

func (m *MastercardCurrencyConversionReply) GetData() *CurrencyDataResponse {
	if m != nil {
		return m.Data
	}
	return nil
}

type CurrencyDataResponse struct {
	// Rate applied to the transaction to convert from Transaction Currency to Cardholder Billing Currency.
	ConversionRate float32 `protobuf:"fixed32,1,opt,name=conversionRate,proto3" json:"conversionRate,omitempty"`
	// Amount in the cardholder billing currency.
	CrdhldBillAmt float32 `protobuf:"fixed32,2,opt,name=crdhldBillAmt,proto3" json:"crdhldBillAmt,omitempty"`
	// Amount in the transaction currency.
	TransAmt float32 `protobuf:"fixed32,3,opt,name=transAmt,proto3" json:"transAmt,omitempty"`
	// Date of the requested FX rates.
	FxDate string `protobuf:"bytes,4,opt,name=fxDate,proto3" json:"fxDate,omitempty"`
	// Currency of the transaction
	TransCurr string `protobuf:"bytes,5,opt,name=transCurr,proto3" json:"transCurr,omitempty"`
	// Cardholder billing currency.
	CrdhldBillCurr string `protobuf:"bytes,6,opt,name=crdhldBillCurr,proto3" json:"crdhldBillCurr,omitempty"`
	// Bankfee
	BankFee float32 `protobuf:"fixed32,7,opt,name=bankFee,proto3" json:"bankFee,omitempty"`
	// Error code
	ErrorCode int64 `protobuf:"varint,8,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// The reason for the error.
	ErrorMessage         string   `protobuf:"bytes,9,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrencyDataResponse) Reset()         { *m = CurrencyDataResponse{} }
func (m *CurrencyDataResponse) String() string { return proto.CompactTextString(m) }
func (*CurrencyDataResponse) ProtoMessage()    {}
func (*CurrencyDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1d46281ede0b93f, []int{2}
}

func (m *CurrencyDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrencyDataResponse.Unmarshal(m, b)
}
func (m *CurrencyDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrencyDataResponse.Marshal(b, m, deterministic)
}
func (m *CurrencyDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyDataResponse.Merge(m, src)
}
func (m *CurrencyDataResponse) XXX_Size() int {
	return xxx_messageInfo_CurrencyDataResponse.Size(m)
}
func (m *CurrencyDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyDataResponse proto.InternalMessageInfo

func (m *CurrencyDataResponse) GetConversionRate() float32 {
	if m != nil {
		return m.ConversionRate
	}
	return 0
}

func (m *CurrencyDataResponse) GetCrdhldBillAmt() float32 {
	if m != nil {
		return m.CrdhldBillAmt
	}
	return 0
}

func (m *CurrencyDataResponse) GetTransAmt() float32 {
	if m != nil {
		return m.TransAmt
	}
	return 0
}

func (m *CurrencyDataResponse) GetFxDate() string {
	if m != nil {
		return m.FxDate
	}
	return ""
}

func (m *CurrencyDataResponse) GetTransCurr() string {
	if m != nil {
		return m.TransCurr
	}
	return ""
}

func (m *CurrencyDataResponse) GetCrdhldBillCurr() string {
	if m != nil {
		return m.CrdhldBillCurr
	}
	return ""
}

func (m *CurrencyDataResponse) GetBankFee() float32 {
	if m != nil {
		return m.BankFee
	}
	return 0
}

func (m *CurrencyDataResponse) GetErrorCode() int64 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CurrencyDataResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*MastercardCurrencyConversionRequest)(nil), "mastercard.MastercardCurrencyConversionRequest")
	proto.RegisterType((*MastercardCurrencyConversionReply)(nil), "mastercard.MastercardCurrencyConversionReply")
	proto.RegisterType((*CurrencyDataResponse)(nil), "mastercard.CurrencyDataResponse")
}

func init() { proto.RegisterFile("pb/currency-conversion.proto", fileDescriptor_f1d46281ede0b93f) }

var fileDescriptor_f1d46281ede0b93f = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x6e, 0xd4, 0x30,
	0x18, 0x24, 0xd9, 0xed, 0xb6, 0xf9, 0x0a, 0x3c, 0x58, 0x80, 0x4c, 0xb4, 0x12, 0x21, 0x20, 0xb4,
	0x2f, 0x4d, 0xa4, 0xc2, 0x05, 0x60, 0x2b, 0x78, 0xea, 0x4b, 0xe0, 0x02, 0x4e, 0xf2, 0x75, 0x89,
	0x48, 0x6c, 0x63, 0x7b, 0x2b, 0x72, 0x11, 0xee, 0x02, 0x97, 0xe2, 0x0a, 0x28, 0x5f, 0xf3, 0xd3,
	0xdd, 0x42, 0xdb, 0x37, 0x7f, 0xe3, 0xf1, 0x64, 0x3c, 0x9e, 0xc0, 0x52, 0xe7, 0x69, 0xb1, 0x35,
	0x06, 0x65, 0xd1, 0x9e, 0x14, 0x4a, 0x5e, 0xa2, 0xb1, 0x95, 0x92, 0x89, 0x36, 0xca, 0x29, 0x06,
	0x8d, 0xb0, 0x0e, 0x4d, 0x21, 0x4c, 0x19, 0xbe, 0xd8, 0x28, 0xb5, 0xa9, 0x31, 0xa5, 0x9d, 0x7c,
	0x7b, 0x91, 0xba, 0xaa, 0x41, 0xeb, 0x44, 0xa3, 0xaf, 0xc8, 0xf1, 0x2f, 0x0f, 0x5e, 0x9d, 0x8f,
	0xfc, 0x75, 0x2f, 0xba, 0x1e, 0x35, 0x33, 0xfc, 0xbe, 0x45, 0xeb, 0xd8, 0x33, 0x58, 0x5c, 0xfc,
	0x38, 0x13, 0x0e, 0xb9, 0x17, 0x79, 0xab, 0x20, 0xeb, 0x27, 0xb6, 0x84, 0xc0, 0x19, 0x21, 0x6d,
	0x77, 0x92, 0xfb, 0xb4, 0x35, 0x01, 0xec, 0x0d, 0x3c, 0x2e, 0x4c, 0xf9, 0xb5, 0x2e, 0x3f, 0x54,
	0x75, 0x4d, 0x94, 0x19, 0x51, 0xf6, 0x50, 0xc6, 0xe1, 0x30, 0x17, 0xf2, 0xdb, 0x47, 0x44, 0x3e,
	0x8f, 0xbc, 0xd5, 0x2c, 0x1b, 0x46, 0x16, 0xc2, 0x11, 0xc9, 0xbd, 0x6f, 0x1c, 0x3f, 0x88, 0xbc,
	0x95, 0x9f, 0x8d, 0x73, 0xfc, 0xc7, 0x83, 0x97, 0xb7, 0x7b, 0xd7, 0x75, 0xcb, 0x18, 0xcc, 0xa5,
	0x68, 0x06, 0xdf, 0xb4, 0xee, 0x30, 0xd7, 0x6a, 0xec, 0x0d, 0xd3, 0x9a, 0x45, 0x70, 0x5c, 0xa2,
	0x2d, 0x4c, 0xa5, 0x5d, 0xa5, 0x64, 0x6f, 0xf4, 0x3a, 0xc4, 0x12, 0x98, 0x97, 0x5d, 0x02, 0x9d,
	0xc5, 0xe3, 0xd3, 0x30, 0xb9, 0xca, 0x36, 0x19, 0xb2, 0x4d, 0xbe, 0x0c, 0xd9, 0x66, 0xc4, 0xbb,
	0xcd, 0x3b, 0x7b, 0x47, 0x5a, 0x82, 0x2f, 0x48, 0x2b, 0x4a, 0xa6, 0x37, 0x4b, 0x86, 0x8b, 0x9c,
	0x09, 0x27, 0x32, 0xb4, 0x5a, 0x49, 0x8b, 0xa4, 0x28, 0xe2, 0xdf, 0x3e, 0x3c, 0xf9, 0xd7, 0x36,
	0x05, 0x3d, 0xdd, 0x7b, 0x78, 0x26, 0x3f, 0xdb, 0x43, 0xd9, 0x6b, 0x78, 0x34, 0x45, 0xdf, 0xf9,
	0xf2, 0x89, 0xb6, 0x0b, 0xee, 0x18, 0x9f, 0xed, 0x19, 0x9f, 0x8a, 0x30, 0xff, 0x7f, 0x11, 0x0e,
	0xee, 0x2e, 0xc2, 0xe2, 0xae, 0x22, 0x1c, 0xd2, 0x87, 0xc7, 0x22, 0x2c, 0x21, 0x40, 0x63, 0x94,
	0x59, 0xab, 0x12, 0xf9, 0x11, 0x95, 0x64, 0x02, 0x58, 0x0c, 0x0f, 0x69, 0x38, 0x47, 0x6b, 0xc5,
	0x06, 0x79, 0x40, 0xea, 0x3b, 0xd8, 0xe9, 0x4f, 0x0f, 0x9e, 0xdf, 0xac, 0xcb, 0x67, 0x34, 0x97,
	0x55, 0x81, 0xac, 0x85, 0xa7, 0x9f, 0xd0, 0xdd, 0x2c, 0x11, 0x4b, 0xaf, 0xbf, 0xcd, 0x3d, 0x7e,
	0x95, 0xf0, 0xe4, 0xfe, 0x07, 0x74, 0xdd, 0xc6, 0x0f, 0xf2, 0x05, 0x35, 0xe8, 0xed, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x68, 0xac, 0xa6, 0x0b, 0xd7, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MastercardCurrencyServiceClient is the client API for MastercardCurrencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MastercardCurrencyServiceClient interface {
	GetCurrencyConversion(ctx context.Context, in *MastercardCurrencyConversionRequest, opts ...grpc.CallOption) (*MastercardCurrencyConversionReply, error)
}

type mastercardCurrencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewMastercardCurrencyServiceClient(cc *grpc.ClientConn) MastercardCurrencyServiceClient {
	return &mastercardCurrencyServiceClient{cc}
}

func (c *mastercardCurrencyServiceClient) GetCurrencyConversion(ctx context.Context, in *MastercardCurrencyConversionRequest, opts ...grpc.CallOption) (*MastercardCurrencyConversionReply, error) {
	out := new(MastercardCurrencyConversionReply)
	err := c.cc.Invoke(ctx, "/mastercard.MastercardCurrencyService/GetCurrencyConversion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MastercardCurrencyServiceServer is the server API for MastercardCurrencyService service.
type MastercardCurrencyServiceServer interface {
	GetCurrencyConversion(context.Context, *MastercardCurrencyConversionRequest) (*MastercardCurrencyConversionReply, error)
}

func RegisterMastercardCurrencyServiceServer(s *grpc.Server, srv MastercardCurrencyServiceServer) {
	s.RegisterService(&_MastercardCurrencyService_serviceDesc, srv)
}

func _MastercardCurrencyService_GetCurrencyConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MastercardCurrencyConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MastercardCurrencyServiceServer).GetCurrencyConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastercard.MastercardCurrencyService/GetCurrencyConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MastercardCurrencyServiceServer).GetCurrencyConversion(ctx, req.(*MastercardCurrencyConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MastercardCurrencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastercard.MastercardCurrencyService",
	HandlerType: (*MastercardCurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrencyConversion",
			Handler:    _MastercardCurrencyService_GetCurrencyConversion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/currency-conversion.proto",
}
