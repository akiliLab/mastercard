// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/mastercard.proto

package mastercard

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MastercardRequest struct {
	MerchantID string `protobuf:"bytes,1,opt,name=MerchantID,proto3" json:"MerchantID,omitempty"`
	// this can be fuzzy or exact search
	Search               int64    `protobuf:"varint,2,opt,name=Search,proto3" json:"Search,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MastercardRequest) Reset()         { *m = MastercardRequest{} }
func (m *MastercardRequest) String() string { return proto.CompactTextString(m) }
func (*MastercardRequest) ProtoMessage()    {}
func (*MastercardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ec760cea500d20, []int{0}
}

func (m *MastercardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MastercardRequest.Unmarshal(m, b)
}
func (m *MastercardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MastercardRequest.Marshal(b, m, deterministic)
}
func (m *MastercardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MastercardRequest.Merge(m, src)
}
func (m *MastercardRequest) XXX_Size() int {
	return xxx_messageInfo_MastercardRequest.Size(m)
}
func (m *MastercardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MastercardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MastercardRequest proto.InternalMessageInfo

func (m *MastercardRequest) GetMerchantID() string {
	if m != nil {
		return m.MerchantID
	}
	return ""
}

func (m *MastercardRequest) GetSearch() int64 {
	if m != nil {
		return m.Search
	}
	return 0
}

type MastercardReply struct {
	MerchantIDs          *MerchantIDs `protobuf:"bytes,1,opt,name=merchantIDs,proto3" json:"merchantIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MastercardReply) Reset()         { *m = MastercardReply{} }
func (m *MastercardReply) String() string { return proto.CompactTextString(m) }
func (*MastercardReply) ProtoMessage()    {}
func (*MastercardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ec760cea500d20, []int{1}
}

func (m *MastercardReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MastercardReply.Unmarshal(m, b)
}
func (m *MastercardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MastercardReply.Marshal(b, m, deterministic)
}
func (m *MastercardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MastercardReply.Merge(m, src)
}
func (m *MastercardReply) XXX_Size() int {
	return xxx_messageInfo_MastercardReply.Size(m)
}
func (m *MastercardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MastercardReply.DiscardUnknown(m)
}

var xxx_messageInfo_MastercardReply proto.InternalMessageInfo

func (m *MastercardReply) GetMerchantIDs() *MerchantIDs {
	if m != nil {
		return m.MerchantIDs
	}
	return nil
}

type MerchantIDs struct {
	Message              string      `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Merchant             []*Merchant `protobuf:"bytes,2,rep,name=Merchant,proto3" json:"Merchant,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MerchantIDs) Reset()         { *m = MerchantIDs{} }
func (m *MerchantIDs) String() string { return proto.CompactTextString(m) }
func (*MerchantIDs) ProtoMessage()    {}
func (*MerchantIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ec760cea500d20, []int{2}
}

func (m *MerchantIDs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerchantIDs.Unmarshal(m, b)
}
func (m *MerchantIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerchantIDs.Marshal(b, m, deterministic)
}
func (m *MerchantIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerchantIDs.Merge(m, src)
}
func (m *MerchantIDs) XXX_Size() int {
	return xxx_messageInfo_MerchantIDs.Size(m)
}
func (m *MerchantIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_MerchantIDs.DiscardUnknown(m)
}

var xxx_messageInfo_MerchantIDs proto.InternalMessageInfo

func (m *MerchantIDs) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MerchantIDs) GetMerchant() []*Merchant {
	if m != nil {
		return m.Merchant
	}
	return nil
}

type Merchant struct {
	Address              *Address `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	PhoneNumber          string   `protobuf:"bytes,2,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	BrandName            string   `protobuf:"bytes,3,opt,name=BrandName,proto3" json:"BrandName,omitempty"`
	MerchantCategory     string   `protobuf:"bytes,4,opt,name=MerchantCategory,proto3" json:"MerchantCategory,omitempty"`
	MerchantDbaName      string   `protobuf:"bytes,5,opt,name=MerchantDbaName,proto3" json:"MerchantDbaName,omitempty"`
	DescriptorText       string   `protobuf:"bytes,6,opt,name=DescriptorText,proto3" json:"DescriptorText,omitempty"`
	LegalCorporateName   string   `protobuf:"bytes,7,opt,name=LegalCorporateName,proto3" json:"LegalCorporateName,omitempty"`
	Comment              string   `protobuf:"bytes,8,opt,name=Comment,proto3" json:"Comment,omitempty"`
	LocationID           int64    `protobuf:"varint,9,opt,name=LocationID,proto3" json:"LocationID,omitempty"`
	SoleProprietorName   string   `protobuf:"bytes,10,opt,name=SoleProprietorName,proto3" json:"SoleProprietorName,omitempty"`
	MatchConfidenceScore int64    `protobuf:"varint,11,opt,name=MatchConfidenceScore,proto3" json:"MatchConfidenceScore,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Merchant) Reset()         { *m = Merchant{} }
func (m *Merchant) String() string { return proto.CompactTextString(m) }
func (*Merchant) ProtoMessage()    {}
func (*Merchant) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ec760cea500d20, []int{3}
}

func (m *Merchant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Merchant.Unmarshal(m, b)
}
func (m *Merchant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Merchant.Marshal(b, m, deterministic)
}
func (m *Merchant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Merchant.Merge(m, src)
}
func (m *Merchant) XXX_Size() int {
	return xxx_messageInfo_Merchant.Size(m)
}
func (m *Merchant) XXX_DiscardUnknown() {
	xxx_messageInfo_Merchant.DiscardUnknown(m)
}

var xxx_messageInfo_Merchant proto.InternalMessageInfo

func (m *Merchant) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Merchant) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Merchant) GetBrandName() string {
	if m != nil {
		return m.BrandName
	}
	return ""
}

func (m *Merchant) GetMerchantCategory() string {
	if m != nil {
		return m.MerchantCategory
	}
	return ""
}

func (m *Merchant) GetMerchantDbaName() string {
	if m != nil {
		return m.MerchantDbaName
	}
	return ""
}

func (m *Merchant) GetDescriptorText() string {
	if m != nil {
		return m.DescriptorText
	}
	return ""
}

func (m *Merchant) GetLegalCorporateName() string {
	if m != nil {
		return m.LegalCorporateName
	}
	return ""
}

func (m *Merchant) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Merchant) GetLocationID() int64 {
	if m != nil {
		return m.LocationID
	}
	return 0
}

func (m *Merchant) GetSoleProprietorName() string {
	if m != nil {
		return m.SoleProprietorName
	}
	return ""
}

func (m *Merchant) GetMatchConfidenceScore() int64 {
	if m != nil {
		return m.MatchConfidenceScore
	}
	return 0
}

type CountrySubdivision struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountrySubdivision) Reset()         { *m = CountrySubdivision{} }
func (m *CountrySubdivision) String() string { return proto.CompactTextString(m) }
func (*CountrySubdivision) ProtoMessage()    {}
func (*CountrySubdivision) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ec760cea500d20, []int{4}
}

func (m *CountrySubdivision) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountrySubdivision.Unmarshal(m, b)
}
func (m *CountrySubdivision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountrySubdivision.Marshal(b, m, deterministic)
}
func (m *CountrySubdivision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountrySubdivision.Merge(m, src)
}
func (m *CountrySubdivision) XXX_Size() int {
	return xxx_messageInfo_CountrySubdivision.Size(m)
}
func (m *CountrySubdivision) XXX_DiscardUnknown() {
	xxx_messageInfo_CountrySubdivision.DiscardUnknown(m)
}

var xxx_messageInfo_CountrySubdivision proto.InternalMessageInfo

func (m *CountrySubdivision) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CountrySubdivision) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// Country contains country informations
type Country struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Country) Reset()         { *m = Country{} }
func (m *Country) String() string { return proto.CompactTextString(m) }
func (*Country) ProtoMessage()    {}
func (*Country) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ec760cea500d20, []int{5}
}

func (m *Country) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Country.Unmarshal(m, b)
}
func (m *Country) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Country.Marshal(b, m, deterministic)
}
func (m *Country) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Country.Merge(m, src)
}
func (m *Country) XXX_Size() int {
	return xxx_messageInfo_Country.Size(m)
}
func (m *Country) XXX_DiscardUnknown() {
	xxx_messageInfo_Country.DiscardUnknown(m)
}

var xxx_messageInfo_Country proto.InternalMessageInfo

func (m *Country) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Country) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// Address contains the full address of a merchant
type Address struct {
	Line1                string              `protobuf:"bytes,1,opt,name=Line1,proto3" json:"Line1,omitempty"`
	Line2                string              `protobuf:"bytes,2,opt,name=Line2,proto3" json:"Line2,omitempty"`
	City                 string              `protobuf:"bytes,3,opt,name=City,proto3" json:"City,omitempty"`
	PostalCode           string              `protobuf:"bytes,4,opt,name=PostalCode,proto3" json:"PostalCode,omitempty"`
	CountrySubdivision   *CountrySubdivision `protobuf:"bytes,5,opt,name=CountrySubdivision,proto3" json:"CountrySubdivision,omitempty"`
	Country              *Country            `protobuf:"bytes,6,opt,name=Country,proto3" json:"Country,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ec760cea500d20, []int{6}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetLine1() string {
	if m != nil {
		return m.Line1
	}
	return ""
}

func (m *Address) GetLine2() string {
	if m != nil {
		return m.Line2
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *Address) GetCountrySubdivision() *CountrySubdivision {
	if m != nil {
		return m.CountrySubdivision
	}
	return nil
}

func (m *Address) GetCountry() *Country {
	if m != nil {
		return m.Country
	}
	return nil
}

type MastercardCurrencyConversionRequest struct {
	// Date of the requested FX rates.
	FxDate string `protobuf:"bytes,1,opt,name=fxDate,proto3" json:"fxDate,omitempty"`
	// Currency of the transaction.
	TransCurr string `protobuf:"bytes,2,opt,name=transCurr,proto3" json:"transCurr,omitempty"`
	// Cardholder billing currency.
	CrdhldBillCurr string `protobuf:"bytes,3,opt,name=crdhldBillCurr,proto3" json:"crdhldBillCurr,omitempty"`
	// Additional fees imposed by the bank.
	BankFee int64 `protobuf:"varint,4,opt,name=bankFee,proto3" json:"bankFee,omitempty"`
	// Amount in the transaction currency
	TransAmt             float32  `protobuf:"fixed32,5,opt,name=transAmt,proto3" json:"transAmt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MastercardCurrencyConversionRequest) Reset()         { *m = MastercardCurrencyConversionRequest{} }
func (m *MastercardCurrencyConversionRequest) String() string { return proto.CompactTextString(m) }
func (*MastercardCurrencyConversionRequest) ProtoMessage()    {}
func (*MastercardCurrencyConversionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ec760cea500d20, []int{7}
}

func (m *MastercardCurrencyConversionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MastercardCurrencyConversionRequest.Unmarshal(m, b)
}
func (m *MastercardCurrencyConversionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MastercardCurrencyConversionRequest.Marshal(b, m, deterministic)
}
func (m *MastercardCurrencyConversionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MastercardCurrencyConversionRequest.Merge(m, src)
}
func (m *MastercardCurrencyConversionRequest) XXX_Size() int {
	return xxx_messageInfo_MastercardCurrencyConversionRequest.Size(m)
}
func (m *MastercardCurrencyConversionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MastercardCurrencyConversionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MastercardCurrencyConversionRequest proto.InternalMessageInfo

func (m *MastercardCurrencyConversionRequest) GetFxDate() string {
	if m != nil {
		return m.FxDate
	}
	return ""
}

func (m *MastercardCurrencyConversionRequest) GetTransCurr() string {
	if m != nil {
		return m.TransCurr
	}
	return ""
}

func (m *MastercardCurrencyConversionRequest) GetCrdhldBillCurr() string {
	if m != nil {
		return m.CrdhldBillCurr
	}
	return ""
}

func (m *MastercardCurrencyConversionRequest) GetBankFee() int64 {
	if m != nil {
		return m.BankFee
	}
	return 0
}

func (m *MastercardCurrencyConversionRequest) GetTransAmt() float32 {
	if m != nil {
		return m.TransAmt
	}
	return 0
}

type MastercardCurrencyConversionReply struct {
	Response             *CurrencyResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MastercardCurrencyConversionReply) Reset()         { *m = MastercardCurrencyConversionReply{} }
func (m *MastercardCurrencyConversionReply) String() string { return proto.CompactTextString(m) }
func (*MastercardCurrencyConversionReply) ProtoMessage()    {}
func (*MastercardCurrencyConversionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ec760cea500d20, []int{8}
}

func (m *MastercardCurrencyConversionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MastercardCurrencyConversionReply.Unmarshal(m, b)
}
func (m *MastercardCurrencyConversionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MastercardCurrencyConversionReply.Marshal(b, m, deterministic)
}
func (m *MastercardCurrencyConversionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MastercardCurrencyConversionReply.Merge(m, src)
}
func (m *MastercardCurrencyConversionReply) XXX_Size() int {
	return xxx_messageInfo_MastercardCurrencyConversionReply.Size(m)
}
func (m *MastercardCurrencyConversionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MastercardCurrencyConversionReply.DiscardUnknown(m)
}

var xxx_messageInfo_MastercardCurrencyConversionReply proto.InternalMessageInfo

func (m *MastercardCurrencyConversionReply) GetResponse() *CurrencyResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CurrencyResponse struct {
	// The name of the service being requested.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of response being returned by the API.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The description of the API being called.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Additional fees imposed by the bank.
	Date *timestamp.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// Amount in the transaction currency
	TransAmt float32 `protobuf:"fixed32,5,opt,name=transAmt,proto3" json:"transAmt,omitempty"`
	// Data
	Data                 *CurrencyDataResponse `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CurrencyResponse) Reset()         { *m = CurrencyResponse{} }
func (m *CurrencyResponse) String() string { return proto.CompactTextString(m) }
func (*CurrencyResponse) ProtoMessage()    {}
func (*CurrencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ec760cea500d20, []int{9}
}

func (m *CurrencyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrencyResponse.Unmarshal(m, b)
}
func (m *CurrencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrencyResponse.Marshal(b, m, deterministic)
}
func (m *CurrencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyResponse.Merge(m, src)
}
func (m *CurrencyResponse) XXX_Size() int {
	return xxx_messageInfo_CurrencyResponse.Size(m)
}
func (m *CurrencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyResponse proto.InternalMessageInfo

func (m *CurrencyResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CurrencyResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CurrencyResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CurrencyResponse) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *CurrencyResponse) GetTransAmt() float32 {
	if m != nil {
		return m.TransAmt
	}
	return 0
}

func (m *CurrencyResponse) GetData() *CurrencyDataResponse {
	if m != nil {
		return m.Data
	}
	return nil
}

type CurrencyDataResponse struct {
	// Rate applied to the transaction to convert from Transaction Currency to
	// Cardholder Billing Currency.
	ConversionRate float32 `protobuf:"fixed32,1,opt,name=conversionRate,proto3" json:"conversionRate,omitempty"`
	// Amount in the cardholder billing currency.
	CrdhldBillAmt float32 `protobuf:"fixed32,2,opt,name=crdhldBillAmt,proto3" json:"crdhldBillAmt,omitempty"`
	// Amount in the transaction currency.
	TransAmt float32 `protobuf:"fixed32,3,opt,name=transAmt,proto3" json:"transAmt,omitempty"`
	// Date of the requested FX rates.
	FxDate string `protobuf:"bytes,4,opt,name=fxDate,proto3" json:"fxDate,omitempty"`
	// Currency of the transaction
	TransCurr string `protobuf:"bytes,5,opt,name=transCurr,proto3" json:"transCurr,omitempty"`
	// Cardholder billing currency.
	CrdhldBillCurr string `protobuf:"bytes,6,opt,name=crdhldBillCurr,proto3" json:"crdhldBillCurr,omitempty"`
	// Bankfee
	BankFee float32 `protobuf:"fixed32,7,opt,name=bankFee,proto3" json:"bankFee,omitempty"`
	// Error code
	ErrorCode int64 `protobuf:"varint,8,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// The reason for the error.
	ErrorMessage         string   `protobuf:"bytes,9,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrencyDataResponse) Reset()         { *m = CurrencyDataResponse{} }
func (m *CurrencyDataResponse) String() string { return proto.CompactTextString(m) }
func (*CurrencyDataResponse) ProtoMessage()    {}
func (*CurrencyDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ec760cea500d20, []int{10}
}

func (m *CurrencyDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrencyDataResponse.Unmarshal(m, b)
}
func (m *CurrencyDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrencyDataResponse.Marshal(b, m, deterministic)
}
func (m *CurrencyDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyDataResponse.Merge(m, src)
}
func (m *CurrencyDataResponse) XXX_Size() int {
	return xxx_messageInfo_CurrencyDataResponse.Size(m)
}
func (m *CurrencyDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyDataResponse proto.InternalMessageInfo

func (m *CurrencyDataResponse) GetConversionRate() float32 {
	if m != nil {
		return m.ConversionRate
	}
	return 0
}

func (m *CurrencyDataResponse) GetCrdhldBillAmt() float32 {
	if m != nil {
		return m.CrdhldBillAmt
	}
	return 0
}

func (m *CurrencyDataResponse) GetTransAmt() float32 {
	if m != nil {
		return m.TransAmt
	}
	return 0
}

func (m *CurrencyDataResponse) GetFxDate() string {
	if m != nil {
		return m.FxDate
	}
	return ""
}

func (m *CurrencyDataResponse) GetTransCurr() string {
	if m != nil {
		return m.TransCurr
	}
	return ""
}

func (m *CurrencyDataResponse) GetCrdhldBillCurr() string {
	if m != nil {
		return m.CrdhldBillCurr
	}
	return ""
}

func (m *CurrencyDataResponse) GetBankFee() float32 {
	if m != nil {
		return m.BankFee
	}
	return 0
}

func (m *CurrencyDataResponse) GetErrorCode() int64 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CurrencyDataResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*MastercardRequest)(nil), "mastercard.MastercardRequest")
	proto.RegisterType((*MastercardReply)(nil), "mastercard.MastercardReply")
	proto.RegisterType((*MerchantIDs)(nil), "mastercard.MerchantIDs")
	proto.RegisterType((*Merchant)(nil), "mastercard.Merchant")
	proto.RegisterType((*CountrySubdivision)(nil), "mastercard.CountrySubdivision")
	proto.RegisterType((*Country)(nil), "mastercard.Country")
	proto.RegisterType((*Address)(nil), "mastercard.Address")
	proto.RegisterType((*MastercardCurrencyConversionRequest)(nil), "mastercard.MastercardCurrencyConversionRequest")
	proto.RegisterType((*MastercardCurrencyConversionReply)(nil), "mastercard.MastercardCurrencyConversionReply")
	proto.RegisterType((*CurrencyResponse)(nil), "mastercard.CurrencyResponse")
	proto.RegisterType((*CurrencyDataResponse)(nil), "mastercard.CurrencyDataResponse")
}

func init() { proto.RegisterFile("proto/mastercard.proto", fileDescriptor_d4ec760cea500d20) }

var fileDescriptor_d4ec760cea500d20 = []byte{
	// 853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0x27, 0x7f, 0x9a, 0x26, 0x13, 0xe0, 0x8e, 0xa5, 0x14, 0x2b, 0x94, 0x23, 0x18, 0x84, 0x2a,
	0xa4, 0xa6, 0x5c, 0xe0, 0x01, 0x24, 0x5e, 0xee, 0x12, 0x71, 0x3a, 0xd1, 0x56, 0x95, 0x73, 0x42,
	0xe2, 0x81, 0x87, 0x8d, 0x3d, 0x4d, 0x2c, 0xec, 0x5d, 0xb3, 0xde, 0x54, 0xe7, 0x8f, 0x06, 0xef,
	0x7c, 0x0d, 0x1e, 0x11, 0x1f, 0x03, 0xed, 0x78, 0xfd, 0x27, 0xae, 0x7b, 0xd7, 0xb7, 0x9d, 0xdf,
	0xfc, 0x66, 0x66, 0x77, 0xe6, 0xb7, 0xbb, 0x70, 0x9c, 0x28, 0xa9, 0xe5, 0x79, 0xcc, 0x53, 0x8d,
	0xca, 0xe7, 0x2a, 0x98, 0x11, 0xc0, 0xa0, 0x42, 0x26, 0x9f, 0x6d, 0xa4, 0xdc, 0x44, 0x78, 0x4e,
	0x9e, 0xf5, 0xee, 0xe6, 0x5c, 0x87, 0x31, 0xa6, 0x9a, 0xc7, 0x49, 0x4e, 0x76, 0x7f, 0x86, 0x0f,
	0x2e, 0x4b, 0xba, 0x87, 0x7f, 0xec, 0x30, 0xd5, 0xec, 0x09, 0xc0, 0x25, 0x2a, 0x7f, 0xcb, 0x85,
	0x7e, 0xb9, 0x74, 0x3a, 0xd3, 0xce, 0xe9, 0xc8, 0xab, 0x21, 0xec, 0x18, 0x06, 0x2b, 0xe4, 0xca,
	0xdf, 0x3a, 0xdd, 0x69, 0xe7, 0xb4, 0xe7, 0x59, 0xcb, 0xbd, 0x80, 0x47, 0xf5, 0x64, 0x49, 0x94,
	0xb1, 0x1f, 0x60, 0x1c, 0x97, 0x81, 0x29, 0xe5, 0x1a, 0xcf, 0x3f, 0x9e, 0xd5, 0x36, 0x5d, 0xe5,
	0x4d, 0xbd, 0x3a, 0xd7, 0xfd, 0x15, 0xc6, 0x35, 0x1f, 0x73, 0xe0, 0xf0, 0x12, 0xd3, 0x94, 0x6f,
	0xd0, 0xee, 0xa8, 0x30, 0xd9, 0x37, 0x30, 0x2c, 0x88, 0x4e, 0x77, 0xda, 0x3b, 0x1d, 0xcf, 0x8f,
	0xda, 0x0a, 0x78, 0x25, 0xcb, 0xfd, 0xbb, 0x57, 0x85, 0xb0, 0x33, 0x38, 0x7c, 0x16, 0x04, 0x0a,
	0xd3, 0x62, 0x7b, 0x1f, 0xd6, 0xa3, 0xad, 0xcb, 0x2b, 0x38, 0x6c, 0x0a, 0xe3, 0xeb, 0xad, 0x14,
	0x78, 0xb5, 0x8b, 0xd7, 0xa8, 0xa8, 0x03, 0x23, 0xaf, 0x0e, 0xb1, 0x13, 0x18, 0x3d, 0x57, 0x5c,
	0x04, 0x57, 0x3c, 0x46, 0xa7, 0x47, 0xfe, 0x0a, 0x60, 0x5f, 0xc3, 0xe3, 0xa2, 0xf4, 0x82, 0x6b,
	0xdc, 0x48, 0x95, 0x39, 0x7d, 0x22, 0xdd, 0xc1, 0xd9, 0x29, 0x3c, 0x2a, 0xb0, 0xe5, 0x9a, 0x53,
	0xbe, 0x03, 0xa2, 0x36, 0x61, 0xf6, 0x15, 0xbc, 0xbf, 0xc4, 0xd4, 0x57, 0x61, 0xa2, 0xa5, 0x7a,
	0x85, 0xaf, 0xb5, 0x33, 0x20, 0x62, 0x03, 0x65, 0x33, 0x60, 0x17, 0xb8, 0xe1, 0xd1, 0x42, 0xaa,
	0x44, 0x2a, 0xae, 0x91, 0x92, 0x1e, 0x12, 0xb7, 0xc5, 0x63, 0xba, 0xbe, 0x90, 0x71, 0x8c, 0x42,
	0x3b, 0xc3, 0xbc, 0xeb, 0xd6, 0x34, 0x22, 0xb9, 0x90, 0x3e, 0xd7, 0xa1, 0x14, 0x2f, 0x97, 0xce,
	0x88, 0x84, 0x50, 0x43, 0x4c, 0xa5, 0x95, 0x8c, 0xf0, 0x5a, 0xc9, 0x44, 0x85, 0xa8, 0xa5, 0xa2,
	0x4a, 0x90, 0x57, 0xba, 0xeb, 0x61, 0x73, 0x38, 0xba, 0xe4, 0xda, 0xdf, 0x2e, 0xa4, 0xb8, 0x09,
	0x03, 0x14, 0x3e, 0xae, 0x7c, 0xa9, 0xd0, 0x19, 0x53, 0xe6, 0x56, 0x9f, 0xfb, 0x23, 0xb0, 0x85,
	0xdc, 0x09, 0xad, 0xb2, 0xd5, 0x6e, 0x1d, 0x84, 0xb7, 0x61, 0x1a, 0x4a, 0xc1, 0x18, 0xf4, 0xa9,
	0x56, 0x2e, 0x13, 0x5a, 0x1b, 0x6c, 0x21, 0x03, 0xb4, 0xe3, 0xa2, 0xb5, 0xfb, 0xd4, 0x9c, 0x8d,
	0xa2, 0x1f, 0x1c, 0xf2, 0x5f, 0xa7, 0x14, 0x0b, 0x3b, 0x82, 0x83, 0x8b, 0x50, 0xe0, 0x53, 0x1b,
	0x94, 0x1b, 0x05, 0x3a, 0xb7, 0x61, 0xb9, 0x41, 0xb9, 0x42, 0x9d, 0x59, 0x35, 0xd0, 0xda, 0x34,
	0xf0, 0x5a, 0xa6, 0xda, 0x74, 0x3c, 0x40, 0x2b, 0x81, 0x1a, 0xc2, 0xae, 0xda, 0x0e, 0x47, 0xf3,
	0x1f, 0xcf, 0x9f, 0xd4, 0x25, 0x7a, 0x97, 0xe5, 0xb5, 0xb5, 0xe5, 0xac, 0x3c, 0x2e, 0x69, 0xa3,
	0xa1, 0x73, 0xeb, 0xf2, 0x0a, 0x8e, 0xfb, 0x67, 0x07, 0xbe, 0xa8, 0x6e, 0xf3, 0x62, 0xa7, 0x14,
	0x0a, 0x3f, 0x5b, 0x48, 0x71, 0x8b, 0x8a, 0x6a, 0xd8, 0xc7, 0xe2, 0x18, 0x06, 0x37, 0xaf, 0x97,
	0x5c, 0x17, 0xcd, 0xb3, 0x96, 0xb9, 0x05, 0x5a, 0x71, 0x91, 0x9a, 0x48, 0xdb, 0x8c, 0x0a, 0x30,
	0x7a, 0xf5, 0x55, 0xb0, 0x8d, 0x82, 0xe7, 0x61, 0x14, 0x11, 0x25, 0x6f, 0x4d, 0x03, 0x35, 0xfa,
	0x5b, 0x73, 0xf1, 0xfb, 0x4f, 0x98, 0x77, 0xa8, 0xe7, 0x15, 0x26, 0x9b, 0xc0, 0x90, 0xd2, 0x3d,
	0x8b, 0x35, 0x35, 0xa5, 0xeb, 0x95, 0xb6, 0xfb, 0x1b, 0x7c, 0xfe, 0xe6, 0xad, 0x9b, 0xa7, 0xe9,
	0x7b, 0x18, 0x2a, 0x4c, 0x13, 0x29, 0x52, 0xb4, 0x17, 0xff, 0x64, 0xaf, 0x21, 0x36, 0xcc, 0xb3,
	0x1c, 0xaf, 0x64, 0xbb, 0xff, 0x74, 0xe0, 0x71, 0xd3, 0x6d, 0x46, 0x2c, 0x6a, 0x12, 0x12, 0x56,
	0x42, 0x3a, 0x4b, 0x4a, 0x09, 0x99, 0xb5, 0x79, 0x3f, 0x02, 0x7b, 0x27, 0xcd, 0x3c, 0xf3, 0x63,
	0xd7, 0x21, 0x36, 0x83, 0x7e, 0x60, 0xfa, 0xd9, 0xa7, 0x4d, 0x4d, 0x66, 0xf9, 0x1b, 0x3e, 0x2b,
	0xde, 0xf0, 0xd9, 0xab, 0xe2, 0x0d, 0xf7, 0x88, 0xf7, 0xa6, 0x4e, 0xb0, 0xef, 0x28, 0x17, 0xb7,
	0x13, 0x9f, 0xb6, 0x1d, 0x70, 0xc9, 0x35, 0x2f, 0x0f, 0x49, 0x6c, 0xf7, 0xaf, 0x2e, 0x1c, 0xb5,
	0xb9, 0x69, 0x6c, 0x55, 0x1b, 0x8b, 0xa1, 0x77, 0xbd, 0x06, 0xca, 0xbe, 0x84, 0xf7, 0xaa, 0x41,
	0x9a, 0x7d, 0x75, 0x89, 0xb6, 0x0f, 0xee, 0x6d, 0xbc, 0xd7, 0xd8, 0x78, 0x25, 0xab, 0xfe, 0xfd,
	0xb2, 0x3a, 0x78, 0xbb, 0xac, 0x06, 0x6f, 0x93, 0xd5, 0x21, 0x15, 0x2e, 0x65, 0x75, 0x02, 0x23,
	0x54, 0x4a, 0x2a, 0xba, 0x94, 0x43, 0x92, 0x5c, 0x05, 0x30, 0x17, 0xde, 0x25, 0xa3, 0xf8, 0x89,
	0x46, 0x94, 0x7d, 0x0f, 0x9b, 0xff, 0xdb, 0xa9, 0xff, 0xa9, 0x2b, 0x54, 0xb7, 0xa1, 0x8f, 0xec,
	0x17, 0x38, 0x7e, 0x81, 0xba, 0xfc, 0xd0, 0x02, 0x14, 0x3a, 0xbc, 0x09, 0x51, 0xa5, 0xec, 0xd3,
	0xbd, 0xcf, 0xaa, 0xf9, 0x19, 0x4f, 0x3e, 0xb9, 0xcf, 0x9d, 0x44, 0x99, 0xfb, 0x0e, 0xcb, 0xe0,
	0xa3, 0x17, 0xa8, 0xef, 0x6a, 0x9c, 0x9d, 0xb7, 0xc7, 0xdd, 0x7b, 0x91, 0x27, 0x67, 0x0f, 0x0f,
	0xa0, 0xd2, 0xeb, 0x01, 0x29, 0xf2, 0xdb, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x40, 0x74, 0x77,
	0x04, 0x89, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MastercardServiceClient is the client API for MastercardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MastercardServiceClient interface {
	GetMerchantIdentifiers(ctx context.Context, in *MastercardRequest, opts ...grpc.CallOption) (*MastercardReply, error)
	GetCurrencyConversion(ctx context.Context, in *MastercardCurrencyConversionRequest, opts ...grpc.CallOption) (*MastercardCurrencyConversionReply, error)
}

type mastercardServiceClient struct {
	cc *grpc.ClientConn
}

func NewMastercardServiceClient(cc *grpc.ClientConn) MastercardServiceClient {
	return &mastercardServiceClient{cc}
}

func (c *mastercardServiceClient) GetMerchantIdentifiers(ctx context.Context, in *MastercardRequest, opts ...grpc.CallOption) (*MastercardReply, error) {
	out := new(MastercardReply)
	err := c.cc.Invoke(ctx, "/mastercard.MastercardService/GetMerchantIdentifiers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mastercardServiceClient) GetCurrencyConversion(ctx context.Context, in *MastercardCurrencyConversionRequest, opts ...grpc.CallOption) (*MastercardCurrencyConversionReply, error) {
	out := new(MastercardCurrencyConversionReply)
	err := c.cc.Invoke(ctx, "/mastercard.MastercardService/GetCurrencyConversion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MastercardServiceServer is the server API for MastercardService service.
type MastercardServiceServer interface {
	GetMerchantIdentifiers(context.Context, *MastercardRequest) (*MastercardReply, error)
	GetCurrencyConversion(context.Context, *MastercardCurrencyConversionRequest) (*MastercardCurrencyConversionReply, error)
}

func RegisterMastercardServiceServer(s *grpc.Server, srv MastercardServiceServer) {
	s.RegisterService(&_MastercardService_serviceDesc, srv)
}

func _MastercardService_GetMerchantIdentifiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MastercardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MastercardServiceServer).GetMerchantIdentifiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastercard.MastercardService/GetMerchantIdentifiers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MastercardServiceServer).GetMerchantIdentifiers(ctx, req.(*MastercardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MastercardService_GetCurrencyConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MastercardCurrencyConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MastercardServiceServer).GetCurrencyConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastercard.MastercardService/GetCurrencyConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MastercardServiceServer).GetCurrencyConversion(ctx, req.(*MastercardCurrencyConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MastercardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastercard.MastercardService",
	HandlerType: (*MastercardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMerchantIdentifiers",
			Handler:    _MastercardService_GetMerchantIdentifiers_Handler,
		},
		{
			MethodName: "GetCurrencyConversion",
			Handler:    _MastercardService_GetCurrencyConversion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mastercard.proto",
}
